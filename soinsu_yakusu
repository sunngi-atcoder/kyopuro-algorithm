#nの素因数分解
def prime_factorize(n):
    a = []
    while n % 2 == 0:
        a.append(2)
        n //= 2
    f = 3
    while f * f <= n:
        if n % f == 0:
            a.append(f)
            n //= f
        else:
            f += 2
    if n != 1:
        a.append(n)
    return a
#nの約数列挙
def make_divisors(n):
    lower_divisors , upper_divisors = [], []
    i = 1
    while i*i <= n:
        if n % i == 0:
            lower_divisors.append(i)
            if i != n // i:
                upper_divisors.append(n//i)
        i += 1
    return lower_divisors + upper_divisors[::-1]

#####################################################################何回も素因数分解する場合はこっち
from collections import defaultdict
from sortedcontainers import SortedSet, SortedList, SortedDict
class Osa_k_Method:
    '''
    osa_k法で高速に素因数分解する(O(log(nmax)))
    https://osak.jp/diary/diary_201310.html#20131017
    '''
    def __init__(self, nmax):
        '''
        nmax: 素因数分解する可能性のある数の最大値
        '''
        self.min_factor = [i for i in range(nmax+1)]
        self.primes = [True for _ in range(nmax+1)]
        self.primes[0] = False
        self.primes[1] = False
        num = 2
        j = num*2
        while j <= nmax:
            self.primes[j] = False
            self.min_factor[j] = num
            j += num
        num = 3
        while num*num <= nmax:
            if self.primes[num]:
                j = num*num
                while j <= nmax:
                    self.primes[j] = False
                    self.min_factor[j] = num
                    j += num
            num += 2
        return

    def factorization(self, n):
        '''nを素因数分解する
        戻り値: factList = [[prime1, exp1], [prime2, exp2],...] 
                n=(prime1)**exp1 * (prime2)**exp2 * ...
        '''

        factDict=dict()
        while n > 1:
            fact = self.min_factor[n]
            if fact not in factDict:
                factDict[fact] = 1
            else:
                factDict[fact] += 1
            n //= fact

        factList = [(fact, order) for fact, order in factDict.items()]
        return factList

##############################################################################多分ルートN
#nの素因数分解
#n以下の素数のリストを返す
def sieve_of_eratosthenes(n): #エラトステネスのふるい
    candidate = list(range(2, n+1)) #候補
    prime = []
    limit = n**0.5 + 1 #+1がないと平方数を素数にしてしまう
    while True:
        p = candidate[0] 
        if limit <= p:
            prime.extend(candidate) #この時点での残っているのは素数
            break
        prime.append(p)
        candidate = [i for i in candidate if i % p != 0]
    return prime
#数大きかったらもっと大きくする
ri=sieve_of_eratosthenes(2*(10**5))
def prime_factorize(n):
    a = []
    now=0
    f=ri[now]
    while f * f <= n:
        if n % f == 0:
            a.append(f)
            n //= f
        else:
            now+=1
            f=ri[now]
    if n != 1:
        a.append(n)
    return a
