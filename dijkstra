#ダイクストラは負閉路がなくても負辺があったら計算量がバカデカくなる
#負辺がある場合はBellman-Ford使う
#ダイクストラ　最短距離リスト出力
import heapq
#隣接リスト、頂点の数、スタート地点
def dijkstra(edges, num_node,sta):
    """ 
    スタート地点からの最短距離をリストで出力する関数
    辺の番号はN頂点の場合、0,1,2,・・・N-1まで
    （問題の番号が1からの場合は、N+1頂点って入れてそのままやればいい)
    """
    node = [float('inf')] * num_node    #スタート地点以外の値は∞で初期化
    node[sta] = 0     #スタートは0で初期化

    node_name = []
    heapq.heappush(node_name, [0, sta])

    while len(node_name) > 0:
        #ヒープから取り出し
        _, min_point = heapq.heappop(node_name)

        #経路の要素を各変数に格納することで，視覚的に見やすくする
        for factor in edges[min_point]:
            goal = factor[0]   #終点
            cost  = factor[1]   #コスト
            #更新条件
            if node[min_point] + cost < node[goal]:
                node[goal] = node[min_point] + cost     #更新
                #ヒープに登録
                heapq.heappush(node_name, [node[min_point] + cost, goal])
    return node
####################################################################
#ダイクストラ　最短経路出力
import heapq
#隣接リスト、頂点数、スタート、ゴールを入れる
def dijkstra(edges, num_node,sta,Goal):
    """ 
    頂点は0から始まる
    0、1,2,・・・・N-1まで
    N頂点で、1~Nまでの場合は、-1してデータを与える
    """
    node = [float('inf')] * num_node    #スタート地点以外の値は∞で初期化
    node[sta] = 0     #スタートは0で初期化

    node_name = []
    heapq.heappush(node_name, [0, [sta]])

    while len(node_name) > 0:
        #ヒープから取り出し
        _, min_point = heapq.heappop(node_name)
        last = min_point[-1]
        if last == Goal:
            return min_point, node  #道順とコストを出力させている
        
        #経路の要素を各変数に格納することで，視覚的に見やすくする
        for factor in edges[last]:
            goal = factor[0]   #終点
            cost  = factor[1]   #コスト

            #更新条件
            if node[last] + cost < node[goal]:
                node[goal] = node[last] + cost     #更新
                #ヒープに登録
                heapq.heappush(node_name, [node[last] + cost, min_point + [goal]])

    return []
