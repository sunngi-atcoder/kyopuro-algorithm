# 例: 各頂点を根とした場合の最長距離を求める全方位木DPの実装例
#例:DP=ReRootingDP(N+1,G(隣接リスト),0,max,1)
#全ての辺について、2通りの部分木情報をくっつける
#eは関数funcの単位元
#resは[i]はfunc(dp[i])です
'''
#もしこの例と違う値を求めたいなら細かいところ変えなきゃいけないかも
'''

import sys
sys.setrecursionlimit(1200000)
class ReRootingDP:
    def __init__(self, N, graph, e, func, start=0):
        self.N = N
        self.graph = graph
        self.e=e
        self.func = func
        #dp[i][j]はiが根のときの、j番目の子方向の部分木の情報
        self.dp = [ [e] * len(graph[u]) for u in range(N) ]
        
        # 各頂点が根になったときの解を格納する配列
        self.res = [e] * N
        self._dfs(start, -1)
        self._bfs(start, -1, self.e)
    
    #上を根として、下が子の情報を与える
    def _dfs(self, u, parent):
        acc = self.e
        for i, v in enumerate(self.graph[u]):
            if v == parent:
                continue
            #下方向の辺についての情報
            self.dp[u][i] = self._dfs(v, u) + 1
            acc = self.func(acc, self.dp[u][i])
        return acc
    
    #下から上の情報を伝える
    def _bfs(self, u, parent, pre_cost):
        num = len(self.graph[u])
        dp_u = self.dp[u]
        #uから親に対して上方向の情報(操作1回)
        for i, v in enumerate(self.graph[u]):
            if v == parent:
                dp_u[i] = pre_cost + 1
        
        # 左側累積・右側累積の用意
        cum_left  = [self.e] * (num + 1)
        cum_right = [self.e] * (num + 1)
        for i in range(num):
            cum_left[i+1] = self.func(cum_left[i], dp_u[i])
        for i in range(num-1, -1, -1):
            cum_right[i] = self.func(cum_right[i+1], dp_u[i])
        # 最終結果： u を根とした場合の解は、全ての辺の情報を統合したもの
        self.res[u] = cum_left[num]
        
        #自分の子に対して、他の子の情報も考慮した情報を与える
        for i, v in enumerate(self.graph[u]):
            if v == parent:
                continue
            next_pre = self.func(cum_left[i], cum_right[i+1])
            self._bfs(v, u, next_pre)
