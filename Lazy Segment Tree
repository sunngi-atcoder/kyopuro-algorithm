'''
set(p,x)でp番目をxにする      (1点更新)
get(p)でp番目の値を取得        (1点取得)
prod(l,r)でfunc([l:r])を得る (範囲取得)
all_prod()                  (全範囲取得)
apply(l,r,f)で[l:r]にfを作用させる(範囲更新)

max_right(l,f)でlからrまでの取得値がfを満たすような最大のrを返す
min_left(r,f)
'''
#ax+b倍したい遅延セグ木
#遅延配列は遅延してる操作を保持している、値配列と次元が違うのも当然
from atcoder.lazysegtree import LazySegTree
A ='元のリスト'
mod=998244353
def func(a, b):
    return (a + b) % mod
e = 0

#mappingは遅延している操作を値に反映させる
def mapping(lu, dd):
    return (dd * lu[0] + lu[1]) % mod
#compositionは遅延している操作を下に反映させ遅延を解消するときに、元の操作と新たな操作を合成する
#ueが上から降りてくる操作、ldが元のやつ
def composition(ue, ld):
    return (ue[0]*ld[0]%mod, (ue[0]*ld[1] + ue[1])%mod)
#1x+0は元の値をそのままにする操作
_id = (1, 0)
Lz= LazySegTree(func, e, mapping, composition, _id, A)
#lからrにa倍して+b
Lz.apply(l,r+1, (a,b))



#範囲全体に+xするセグ木(もうライブラリ持ってるけど)#########################
from atcoder.lazysegtree import LazySegTree
def op(a, b):
    return 0
e = 0
def mapping(a, b):
    return a + b
def composition(a, b):
    return a + b
id_ = 0
segtree = LazySegTree(op, e, mapping, composition, id_, A)
#lからrの要素全てにxを足す
segtree.apply(l, r+1, x)


#区間加算用##########################################################################RAQ
def segfunc(x,y):
　　　　　　　　　#関数を入れる
    return x+y
class LazySegTree_RAQ:
#リスト、関数(segfunc)、単位元を入れる
#単位元はある数と単位元を演算しても「ある数」のままになるような数のこと　　　かけ算なら1　足し算なら0
    def __init__(self,init_val,segfunc,ide_ele):
        n = len(init_val)
        self.segfunc = segfunc
        self.ide_ele = ide_ele
        self.num = 1<<(n-1).bit_length()
        self.tree = [ide_ele]*2*self.num
        self.lazy = [0]*2*self.num
        for i in range(n):
            self.tree[self.num+i] = init_val[i]
        for i in range(self.num-1,0,-1):
            self.tree[i] = self.segfunc(self.tree[2*i], self.tree[2*i+1])
    def gindex(self,l,r):
        l += self.num
        r += self.num
        lm = l>>(l&-l).bit_length()
        rm = r>>(r&-r).bit_length()
        while r>l:
            if l<=lm:
                yield l
            if r<=rm:
                yield r
            r >>= 1
            l >>= 1
        while l:
            yield l
            l >>= 1
    def propagates(self,*ids):
        for i in reversed(ids):
            v = self.lazy[i]
            if v==0:
                continue
            self.lazy[i] = 0
            self.lazy[2*i] += v
            self.lazy[2*i+1] += v
            self.tree[2*i] += v
            self.tree[2*i+1] += v
#区間全体に加算するのに使う、半開区間[l,r)に対して
    def add(self,l,r,x):
        ids = self.gindex(l,r)
        l += self.num
        r += self.num
        while l<r:
            if l&1:
                self.lazy[l] += x
                self.tree[l] += x
                l += 1
            if r&1:
                self.lazy[r-1] += x
                self.tree[r-1] += x
            r >>= 1
            l >>= 1
        for i in ids:
            self.tree[i] = self.segfunc(self.tree[2*i], self.tree[2*i+1]) + self.lazy[i]
#半開区間[l,r)に対して
    def query(self,l,r):
        self.propagates(*self.gindex(l,r))
        res = self.ide_ele
        l += self.num
        r += self.num
        while l<r:
            if l&1:
                res = self.segfunc(res,self.tree[l])
                l += 1
            if r&1:
                res = self.segfunc(res,self.tree[r-1])
            l >>= 1
            r >>= 1
        return res

#区間更新##################################################################RUQ
def segfunc(x,y):
#関数を入れる
    return min(x,y)
class LazySegTree_RUQ:
#リスト、関数(segfunc)、単位元を入れる
#単位元はある数と単位元を演算しても「ある数」のままになるような数のこと　　　かけ算なら1　足し算なら0
    def __init__(self,init_val,segfunc,ide_ele):
        n = len(init_val)
        self.segfunc = segfunc
        self.ide_ele = ide_ele
        self.num = 1<<(n-1).bit_length()
        self.tree = [ide_ele]*2*self.num
        self.lazy = [None]*2*self.num
        for i in range(n):
            self.tree[self.num+i] = init_val[i]
        for i in range(self.num-1,0,-1):
            self.tree[i] = self.segfunc(self.tree[2*i],self.tree[2*i+1])
    def gindex(self,l,r):
        l += self.num
        r += self.num
        lm = l>>(l&-l).bit_length()
        rm = r>>(r&-r).bit_length()
        while r>l:
            if l<=lm:
                yield l
            if r<=rm:
                yield r
            r >>= 1
            l >>= 1
        while l:
            yield l
            l >>= 1
    def propagates(self,*ids):
        for i in reversed(ids):
            v = self.lazy[i]
            if v is None:
                continue
            self.lazy[i] = None
            self.lazy[2*i] = v
            self.lazy[2*i+1] = v
            self.tree[2*i] = v
            self.tree[2*i+1] = v
#半開区間[l,r)の要素を全てxにする
    def update(self,l,r,x):
        ids = self.gindex(l,r)
        self.propagates(*self.gindex(l,r))
        l += self.num
        r += self.num
        while l<r:
            if l&1:
                self.lazy[l] = x
                self.tree[l] = x
                l += 1
            if r&1:
                self.lazy[r-1] = x
                self.tree[r-1] = x
            r >>= 1
            l >>= 1
        for i in ids:
            self.tree[i] = self.segfunc(self.tree[2*i], self.tree[2*i+1])
#半開区間[l,r)について
    def query(self,l,r):
        ids = self.gindex(l,r)
        self.propagates(*self.gindex(l,r))
        res = self.ide_ele
        l += self.num
        r += self.num
        while l<r:
            if l&1:
                res = self.segfunc(res,self.tree[l])
                l += 1
            if r&1:
                res = self.segfunc(res,self.tree[r-1])
            l >>= 1
            r >>= 1
        return res
