def segfunc(x, y):
    return x or y
#################

#####ide_ele#####
#単位元はある数と単位元を演算したときに必ず、元の数と同じ結果になるもの
#例えば足し算の場合、a(ある数)+0=aだから単位元は0
#足し算0　かけ算1　最大値-INF　最小値INF　最小公倍数1　or1　　　　　・・・
ide_ele = 0
class SegTree:
    """
    init(init_val, ide_ele): 配列init_valで初期化 O(N)
    update(k, x): k番目の値をxに更新 O(logN)
    query(l, r): 区間[l, r)をsegfuncしたものを返す O(logN)
    """
    def __init__(self, init_val, segfunc, ide_ele):
        """
        init_val: 配列の初期値
        segfunc: 区間にしたい操作
        ide_ele: 単位元
        n: 要素数
        num: n以上の最小の2のべき乗
        tree: セグメント木(1-index)
        """
        n = len(init_val)
        self.segfunc = segfunc
        self.ide_ele = ide_ele
        self.num = 1 << (n - 1).bit_length()
        self.tree = [ide_ele] * 2 * self.num
        # 配列の値を葉にセット
        for i in range(n):
            self.tree[self.num + i] = init_val[i]
        # 構築していく
        for i in range(self.num - 1, 0, -1):
            self.tree[i] = self.segfunc(self.tree[2 * i], self.tree[2 * i + 1])

    def update(self, k, x):
        """
        k番目の値をxに更新
        k: index(0-index)
        x: update value
        """
        k += self.num
        self.tree[k] = x
        while k > 1:
            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])
            k >>= 1
        #半開区間[l,r)のため、l以上r未満の範囲の中での値（最小値とか）を求める
        #l以上r以下ではない!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    def query(self, l, r):
        """
        [l, r)のsegfuncしたものを得る
        l: index(0-index)
        r: index(0-index)
        """
        res = self.ide_ele

        l += self.num
        r += self.num
        while l < r:
            if l & 1:
                res = self.segfunc(res, self.tree[l])
                l += 1
            if r & 1:
                res = self.segfunc(res, self.tree[r - 1])
            l >>= 1
            r >>= 1
        return res



#ACLを使うやり方########################################################################################
#大きい方から2番目の数の個数を計算
from atcoder.segtree import SegTree
'''
一点更新set(p,x)   indexpをxにする
一点取得get(p)     indexpを取得する
範囲取得prod(l,r)  l~r-1までのfuncをとる
全範囲取得allprod()
にぶたんはmax_right(l,f)やmax_left(r,f)がある
'''
#二つの値の合成
def func(a,b):
    #値
    val=set([])
    for i,k in a:
        val.add(i)
    for i,k in b:
        val.add(i)
    val=list(set(val))
    K=[0 for i in range(len(val))]
    for i,k in a:
        K[val.index(i)]+=k
    for i,k in b:
        K[val.index(i)]+=k
    So=[[val[i],K[i]] for i in range(len(val))]
    So.sort(reverse=True)
    So.append([0,0])
    return [So[0],So[1]]

#単位元、これは上のセルの初期値になる
e=[[0,0],[0,0]]
#Vは元のリスト
Seg=SegTree(func,e,V)

