#pypyじゃなくてpythonで出した方がいいっぽい
#出典:[数学・numpy] 高速フーリエ変換(FFT)による畳み込み
#mod取るやつも↑に書いてある
#多項式の係数のリストf,gを与えると、f*gの結果の多項式の係数が返ってくる
#和がkとなるような通り数を計算できる

import numpy as np
def convolve(f, g):
    """
    Parameters
    ----------
    f : np.ndarray (int64)
        f[i] に、x^i の係数が入っている
    g : np.ndarray (int64)
        g[i] に、x^i の係数が入っている
    Returns
    -------
    h : np.ndarray
        f,g の積
    """
    # h の長さ以上の n=2^k を計算
    fft_len = 1
    while 2 * fft_len < len(f) + len(g) - 1:
        fft_len *= 2
    fft_len *= 2
    # フーリエ変換
    Ff = np.fft.rfft(f, fft_len)
    Fg = np.fft.rfft(g, fft_len)
    # 各点積
    Fh = Ff * Fg
    # フーリエ逆変換
    h = np.fft.irfft(Fh, fft_len)
    # 小数になっているので、整数にまるめる
    h = np.rint(h).astype(np.int64)
    return h[:len(f) + len(g) - 1]

#例
# (1 + 2x + 3x^2)(4 + 5x + 6x^2) = 4 + 13x + 28x^2 + 27x^3 + 18x^4
f = np.array([1, 2, 3], np.int64)
g = np.array([4, 5, 6], np.int64)
h = convolve(f, g)
print(h)
